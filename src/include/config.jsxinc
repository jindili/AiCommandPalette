// CONFIGURATION

// ENVIRONMENT VARIABLES

var aiVersion = parseFloat(app.version);
var locale = $.locale;
var os = $.os;
var sysOS = /mac/i.test(os) ? "mac" : "win";
var windowsFlickerFix = sysOS === "win" && aiVersion < 26.4 ? true : false;
var settingsRequiredUpdateVersion = "0.10.0";

// DEVELOPMENT SETTINGS

// localization testing
// $.locale = false;
// $.locale = "de";
// $.locale = "ru";

// DIALOG SETTINGS

var paletteSettings = {};
paletteSettings.paletteWidth = 600;
// was informed windows and mac have different listbox row hights so this makes sure exactly 9 rows show
paletteSettings.paletteHeight = sysOS === "win" ? 211 : 201;
paletteSettings.bounds = [
  0,
  0,
  paletteSettings.paletteWidth,
  paletteSettings.paletteHeight,
];

paletteSettings.defaultColumns = {};
paletteSettings.defaultColumns[localize(strings.name_title_case)] = {
  width: 475,
  key: "loc",
};
paletteSettings.defaultColumns[localize(strings.type_title_case)] = {
  width: 100,
  key: "type",
};

var visibleListItems = 9;
var recentCommandsCount = 25;

// MISCELLANEOUS SETTINGS

var namedObjectLimit = 2000;
var regexEllipsis = /\.\.\.$/;
var regexCarrot = /\s>\s/g;

// DEVELOPMENT HELPERS

var devInfo = {};
devInfo.folder = function () {
  return settingsFolder;
};
devInfo.dataFile = function () {
  var folder = this.folder();
  var file = setupFileObject(folder, "data.json");
  return file;
};
devInfo.commandsFile = function () {
  var folder = this.folder();
  var file = setupFileObject(folder, "commands.json");
  return file;
};
devInfo.save = function () {
  writeJSONData(data, this.dataFile());
  writeJSONData(commandsData, this.commandsFile());
};

/**
 * Show an alert with all object data for a command.
 * @param command Command to show data about.
 */
function alertCommandData(command) {
  var s = "";
  for (var prop in command) {
    var subS = "";
    if (typeof command[prop] == "object") {
      for (var subProp in command[prop]) {
        subS += "> " + subProp + ": " + command[prop][subProp] + "\n";
      }
      s += prop + ":\n" + subS;
    } else {
      s += prop + ": " + command[prop] + "\n";
    }
  }
  alert(s);
}
