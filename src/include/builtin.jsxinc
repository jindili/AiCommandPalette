// AI COMMAND PALETTE OPERATIONS

/**
 * Execute script actions.
 * @param {Object} action Script action to execute.
 */
function scriptAction(action) {
  var write = true;
  switch (action) {
    case "settings":
      AiCommandPaletteSettings();
      write = false;
      break;
    case "about":
      about();
      write = false;
      break;
    case "buildWorkflow":
      buildWorkflow();
      break;
    case "allWorkflows":
      showAllWorkflows();
      break;
    case "editWorkflow":
      editWorkflow();
      break;
    case "loadScript":
      loadScripts();
      break;
    case "allScripts":
      showAllScripts();
      break;
    case "setFileBookmark":
      loadFileBookmark();
      write = true;
      break;
    case "setFolderBookmark":
      loadFolderBookmark();
      break;
    case "allBookmarks":
      showAllBookmarks();
      break;
    case "allActions":
      showAllActions();
      break;
    case "hideCommand":
      hideCommand();
      break;
    case "unhideCommand":
      unhideCommand();
      break;
    case "deleteCommand":
      deleteCommand();
      break;
    case "enableTypeInSearch":
    case "disableTypeInSearch":
      data.settings.searchIncludesType = !data.settings.searchIncludesType;
      break;
    case "recentCommands":
      recentCommands();
      break;
    case "clearRecentCommands":
      if (
        !confirm(
          localize(locStrings.cd_clear_recent_confirm),
          "noAsDflt",
          localize(locStrings.cd_exception)
        )
      )
        return;
      data.recent.commands = [];
      alert(localize(locStrings.recent_commands_cleared));
      break;
    case "revealPrefFile":
      settings.reveal();
      write = false;
      break;
    default:
      alert(localize(locStrings.cd_invalid, action));
  }
  if (!write) return;
  settings.save();
}

/**
 * Execute built-in actions.
 * @param {Object} action Built-in action to execute.
 */
function builtinAction(action) {
  switch (action) {
    case "documentReport":
      if (activeDocument) documentReport();
      break;
    case "exportVariables":
      if (activeDocument) exportVariables();
      break;
    case "goToArtboard":
      if (activeDocument) goToArtboard();
      break;
    case "goToDocument":
      if (app.documents.length > 1) {
        goToOpenDocument();
      }
      break;
    case "goToNamedObject":
      if (activeDocument) goToNamedObject();
      break;
    case "imageCapture":
      imageCapture();
      break;
    case "recentFiles":
      recentFiles();
      break;
    case "redrawWindows":
      app.redraw();
      break;
    case "revealActiveDocument":
      if (activeDocument) {
        if (app.activeDocument.path.fsName) {
          var fp = new Folder(app.activeDocument.path.fsName);
          fp.execute();
        } else {
          alert(localize(locStrings.active_document_not_saved));
        }
      }
      break;
    default:
      alert(localize(locStrings.cd_invalid, action));
  }
}

/** Ai Command Palette configuration commands. */
function AiCommandPaletteSettings() {
  var configCommands = filterCommands(
    (commands = commandsData),
    (types = ["config"]),
    (showHidden = false),
    (hideCommands = null),
    (docRequired = false),
    (selRequired = false)
  );
  var result = commandPalette(
    (commands = configCommands),
    (title = localize(locStrings.cp_config)),
    (columns = paletteSettings.defaultColumns),
    (multiselect = false)
  );
  if (!result) return;
  processCommand(result[0]);
}

/** Ai Command Palette About Dialog. */
function about() {
  var win = new Window("dialog");
  win.text = localize(locStrings.about);
  win.alignChildren = "fill";

  // script info
  var pAbout = win.add("panel");
  pAbout.margins = 20;
  pAbout.alignChildren = "fill";
  pAbout.add("statictext", [0, 0, 500, 100], localize(locStrings.description), {
    multiline: true,
  });

  var links = pAbout.add("group");
  links.orientation = "column";
  links.alignChildren = ["center", "center"];
  links.add("statictext", undefined, localize(locStrings.version, _version));
  links.add("statictext", undefined, localize(locStrings.copyright));
  var githubText =
    localize(locStrings.github) + ": https://github.com/joshbduncan/AiCommandPalette";
  var github = links.add("statictext", undefined, githubText);
  // window buttons
  var winButtons = win.add("group");
  winButtons.orientation = "row";
  winButtons.alignChildren = ["center", "center"];
  var ok = winButtons.add("button", undefined, "OK");
  ok.preferredSize.width = 100;

  github.addEventListener("mousedown", function () {
    openURL("https://github.com/joshbduncan/AiCommandPalette");
  });

  win.show();
}

/** Document Info Dialog */
function documentReport() {
  // setup the basic document info
  var rulerUnits = app.activeDocument.rulerUnits.toString().split(".").pop();
  var fileInfo =
    localize(locStrings.dr_header) +
    localize(locStrings.dr_filename) +
    app.activeDocument.name +
    "\n" +
    localize(locStrings.dr_path) +
    (app.activeDocument.path.fsName
      ? app.activeDocument.path.fsName
      : localize(locStrings.none)) +
    "\n" +
    localize(locStrings.dr_color_space) +
    app.activeDocument.documentColorSpace.toString().split(".").pop() +
    "\n" +
    localize(locStrings.dr_width) +
    convertPointsTo(app.activeDocument.width, rulerUnits) +
    " " +
    rulerUnits +
    "\n" +
    localize(locStrings.dr_height) +
    convertPointsTo(app.activeDocument.height, rulerUnits) +
    " " +
    rulerUnits;

  // generate all optional report information (all included by default)
  var reportOptions = {
    artboards: {
      str: getCollectionObjectNames(app.activeDocument.artboards)
        .toString()
        .replace(/,/g, "\n"),
      active: true,
    },
    fonts: {
      str: getCollectionObjectNames(getDocumentFonts(app.activeDocument), true)
        .toString()
        .replace(/,/g, "\n"),
      active: true,
    },
    layers: {
      str: getCollectionObjectNames(app.activeDocument.layers)
        .toString()
        .replace(/,/g, "\n"),
      active: true,
    },
    placed_items: {
      str: getPlacedFileInfoForReport().toString().replace(/,/g, "\n"),
      active: true,
    },
    spot_colors: {
      str: getCollectionObjectNames(app.activeDocument.spots, true)
        .toString()
        .replace(/,/g, "\n"),
      active: true,
    },
  };

  // build the report from the selected options (active = true)
  function buildReport() {
    if (!app.activeDocument.saved) alert(localize(locStrings.document_report_warning));

    var infoString = localize(locStrings.dr_info_string) + "\n\n" + fileInfo;
    for (var p in reportOptions) {
      if (reportOptions[p].active && reportOptions[p].str) {
        infoString +=
          "\n\n" +
          localize(locStrings[p.toLowerCase()]) +
          "\n-----\n" +
          reportOptions[p].str;
      }
    }
    infoString += "\n\n" + localize(locStrings.dr_file_created) + new Date();
    return infoString;
  }

  // setup the dialog
  var win = new Window("dialog");
  win.text = localize(locStrings.document_report);
  win.orientation = "column";
  win.alignChildren = ["center", "top"];
  win.alignChildren = "fill";

  // panel - options
  var pOptions = win.add("panel", undefined, "Include?");
  pOptions.orientation = "row";
  pOptions.margins = 20;

  // add checkboxes for each report option
  var cb;
  for (var p in reportOptions) {
    cb = pOptions.add("checkbox", undefined, p);
    if (reportOptions[p].str) {
      cb.value = true;
      // add onClick function for each cb to update rebuild report
      cb.onClick = function () {
        if (this.value) {
          reportOptions[this.text].active = true;
        } else {
          reportOptions[this.text].active = false;
        }
        info.text = buildReport();
      };
    } else {
      cb.value = false;
      cb.enabled = false;
    }
  }

  // script info
  var info = win.add("edittext", [0, 0, 400, 400], buildReport(), {
    multiline: true,
    scrollable: true,
    readonly: true,
  });

  // window buttons
  var winButtons = win.add("group");
  winButtons.orientation = "row";
  winButtons.alignChildren = ["center", "center"];
  var saveInfo = winButtons.add("button", undefined, localize(locStrings.save));
  saveInfo.preferredSize.width = 100;
  var close = winButtons.add("button", undefined, localize(locStrings.close), {
    name: "ok",
  });
  close.preferredSize.width = 100;

  // save document info to selected file
  saveInfo.onClick = function () {
    var f = File.saveDialog();
    if (f) {
      try {
        f.encoding = "UTF-8";
        f.open("w");
        f.write(info.text);
        f.close();
      } catch (e) {
        alert(localize(locStrings.fl_error_writing, f));
      }
      if (f.exists) alert(localize(locStrings.file_saved, f.fsName));
    }
  };
  // show the info dialog
  win.show();
}

/**
 * Export the active artboard as a png file using the api `Document.imageCapture()` method.
 * https://ai-scripting.docsforadobe.dev/jsobjref/Document.html?#document-imagecapture
 */
function imageCapture() {
  if (activeDocument) {
    var f = File.saveDialog();
    if (f) {
      try {
        app.activeDocument.imageCapture(f);
      } catch (e) {
        alert(localize(locStrings.fl_error_writing, f));
      }
      // if chosen file name doesn't end in ".png" add the
      // correct extension so they captured file open correctly
      if (f.name.indexOf(".png") < f.name.length - 4)
        f.rename(f.name.toString() + ".png");
      if (f.exists) alert(localize(locStrings.file_saved, f.fsName));
    }
  }
}

/**
 *
 * https://ai-scripting.docsforadobe.dev/jsobjref/Document.html#document-exportvariables
 */
function exportVariables() {
  if (app.activeDocument.variables.length > 0) {
    var f = File.saveDialog();
    if (f) {
      try {
        app.activeDocument.exportVariables(f);
      } catch (e) {
        alert(localize(locStrings.fl_error_writing, f));
      }
      if (f.exists) alert(localize(locStrings.file_saved, f.fsName));
    }
  } else {
    alert(localize(locStrings.no_document_variables));
  }
}

/** Set bookmarked file to open in Ai from within Ai Command Palette. */
function loadFileBookmark() {
  var acceptedTypes = [
    ".ai",
    ".ait",
    ".pdf",
    ".dxf",
    ".avif",
    ".BMP",
    ".RLE",
    ".DIB",
    ".cgm",
    ".cdr",
    ".eps",
    ".epsf",
    ".ps",
    ".emf",
    ".gif",
    ".heic",
    ".heif",
    ".eps",
    ".epsf",
    ".ps",
    ".jpg",
    ".jpe",
    ".jpeg",
    ".jpf",
    ".jpx",
    ".jp2",
    ".j2k",
    ".j2c",
    ".jpc",
    ".rtf",
    ".doc",
    ".docx",
    ".PCX",
    ".psd",
    ".psb",
    ".pdd",
    ".PXR",
    ".png",
    ".pns",
    ".svg",
    ".svgz",
    ".TGA",
    ".VDA",
    ".ICB",
    ".VST",
    ".txt",
    ".tif",
    ".tiff",
    ".webp",
    ".wmf",
  ]; // file types taken from Ai open dialog
  re = new RegExp(acceptedTypes.toString().replace(/,/g, "|") + "$", "i");
  var files = loadFileTypes(localize(locStrings.bm_set_bookmark), true, re);
  if (files.length > 0) {
    var f, fname;
    for (var i = 0; i < files.length; i++) {
      f = files[i];
      fname = decodeURI(f.name);
      if (data.commands.bookmark.hasOwnProperty(fname)) {
        if (
          !confirm(
            localize(locStrings.bm_already_loaded),
            "noAsDflt",
            localize(locStrings.bm_already_loaded_title)
          )
        )
          continue;
      }
      try {
        data.commands.bookmark[fname] = {
          type: "bookmark",
          path: f.fsName,
          bookmarkType: "file",
        };
      } catch (e) {
        alert(localize(locStrings.bm_error_loading, f.fsName));
      }
    }
  }
}

/** Set bookmarked folder to open on system from within Ai Command Palette. */
function loadFolderBookmark() {
  var f, fname;
  f = Folder.selectDialog(localize(locStrings.bm_set_bookmark));
  if (f) {
    fname = decodeURI(f.name);
    if (data.commands.bookmark.hasOwnProperty(fname)) {
      if (
        !confirm(
          localize(locStrings.bm_already_loaded),
          "noAsDflt",
          localize(locStrings.bm_already_loaded_title)
        )
      )
        return;
    }
    try {
      data.commands.bookmark[fname] = {
        type: "bookmark",
        path: f.fsName,
        bookmarkType: "folder",
      };
    } catch (e) {
      alert(localize(locStrings.bm_error_loading, f.fsName));
    }
  }
}

/** Load external scripts into Ai Command Palette. */
function loadScripts() {
  var acceptedTypes = [".jsx", ".js"];
  re = new RegExp(acceptedTypes.toString().replace(/,/g, "|") + "$", "i");
  var files = loadFileTypes(localize(locStrings.sc_load_script), true, ".jsx$|.js$");
  if (files.length > 0) {
    var f, fname;
    for (var i = 0; i < files.length; i++) {
      f = files[i];
      fname = decodeURI(f.name);
      if (data.commands.script.hasOwnProperty(fname)) {
        if (
          !confirm(
            localize(locStrings.sc_already_loaded),
            "noAsDflt",
            localize(locStrings.sc_already_loaded_title)
          )
        )
          continue;
      }
      try {
        data.commands.script[fname] = { type: "script", path: f.fsName };
      } catch (e) {
        alert(localize(locStrings.sc_error_loading, f.fsName));
      }
    }
  } else {
    alert(localize(locStrings.sc_none_selected));
  }
}

/** Show all scripts. */
function showAllScripts() {
  var scriptCommands = filterCommands(
    (commands = commandsData),
    (types = ["script"]),
    (showHidden = false),
    (hideCommands = null),
    (docRequired = false),
    (selRequired = false)
  );
  var result = commandPalette(
    (commands = scriptCommands),
    (title = localize(locStrings.Scripts)),
    (columns = paletteSettings.defaultColumns),
    (multiselect = false)
  );
  if (!result) return;
  processCommand(result[0]);
}

/** Show all bookmarks. */
function showAllBookmarks() {
  var bookmarkCommands = filterCommands(
    (commands = commandsData),
    (types = ["bookmark"]),
    (showHidden = false),
    (hideCommands = null),
    (docRequired = false),
    (selRequired = false)
  );
  var result = commandPalette(
    (commands = bookmarkCommands),
    (title = localize(locStrings.Bookmarks)),
    (columns = paletteSettings.defaultColumns),
    (multiselect = false)
  );
  if (!result) return;
  processCommand(result[0]);
}

/** Show all actions. */
function showAllActions() {
  var actionCommands = filterCommands(
    (commands = commandsData),
    (types = ["action"]),
    (showHidden = false),
    (hideCommands = null),
    (docRequired = false),
    (selRequired = false)
  );
  var result = commandPalette(
    (commands = actionCommands),
    (title = localize(locStrings.Actions)),
    (columns = paletteSettings.defaultColumns),
    (multiselect = false)
  );
  if (!result) return;
  processCommand(result[0]);
}

/** Hide commands from Ai Command Palette. */
function hideCommand() {
  var hideableCommands = filterCommands(
    (commands = commandsData),
    (types = ["bookmark", "script", "workflow", "menu", "tool", "action", "builtin"]),
    (showHidden = false),
    (hideCommands = null),
    (docRequired = false),
    (selRequired = false)
  );
  var result = commandPalette(
    (commands = hideableCommands),
    (title = localize(locStrings.cd_hide_select)),
    (columns = paletteSettings.defaultColumns),
    (multiselect = true)
  );
  if (!result) return;
  for (var i = 0; i < result.length; i++) {
    if (data.settings.hidden.hasOwnProperty(result[i].id)) continue;
    data.settings.hidden.push(result[i].id);
  }
}

/** Unhide hidden commands. */
function unhideCommand() {
  var hiddenCommands = [];
  for (var i = 0; i < data.settings.hidden.length; i++) {
    if (!commandsData.hasOwnProperty(data.settings.hidden[i])) continue; // FIXME: add alert
    hiddenCommands.push(commandsData[data.settings.hidden[i]]);
  }
  var result = commandPalette(
    (commands = hiddenCommands),
    (title = localize(locStrings.cd_reveal_menu_select)),
    (columns = paletteSettings.defaultColumns),
    (multiselect = true)
  );
  if (!result) return;
  for (var i = 0; i < result.length; i++) {
    data.settings.hidden.splice(data.settings.hidden.indexOf(result[i].id), 1);
  }
}

/** Delete commands from Ai Command Palette. */
function deleteCommand() {
  var deletableCommands = filterCommands(
    (commands = commandsData),
    (types = ["bookmark", "script", "workflow"]),
    (showHidden = false),
    (hideCommands = null),
    (docRequired = false),
    (selRequired = false)
  );
  var result = commandPalette(
    (commands = deletableCommands),
    (title = localize(locStrings.cd_delete_select)),
    (columns = paletteSettings.defaultColumns),
    (multiselect = true)
  );
  if (!result) return;
  if (
    confirm(
      localize(locStrings.cd_delete_confirm, result.join("\n")),
      "noAsDflt",
      localize(locStrings.cd_delete_confirm_title)
    )
  ) {
    var command, type;
    for (var i = 0; i < result.length; i++) {
      command = localizedCommandLookup[result[i].text];
      type = commandsData[command].type;
      try {
        delete data.commands[type][command];
      } catch (e) {
        alert(localize(locStrings.cd_error_delete, command));
      }
    }
  }
}

// BUILT-IN COMMANDS

/** Present a command palette with all open documents and goto the chosen one. */
function goToOpenDocument() {
  var documentLookup = {};
  var openDocuments = [];
  var curDocument, documentName;
  for (var i = 0; i < app.documents.length; i++) {
    curDocument = app.documents[i];
    var colormode =
      " (" + curDocument.documentColorSpace.toString().split(".").pop() + ")";
    documentName =
      curDocument == app.activeDocument
        ? "x " + curDocument.name + " " + colormode
        : "   " + curDocument.name + " " + colormode;
    openDocuments.push({ name: documentName, type: localize(locStrings.document) });
    documentLookup[documentName] = curDocument;
  }
  var result = commandPalette(
    (commands = openDocuments),
    (title = localize(locStrings.go_to_open_document)),
    (multiselect = false)
  );
  if (!result) return;
  documentLookup[result].activate();
}

/** Present a command palette with all artboards and zoom to the chosen one. */
function goToArtboard() {
  var artboardLookup = {};
  var artboards = [];
  var abName;
  for (var i = 0; i < app.activeDocument.artboards.length; i++) {
    abName = "#" + i + "  " + app.activeDocument.artboards[i].name;
    artboards.push({ name: abName, type: localize(locStrings.artboard) });
    artboardLookup[abName] = i;
  }
  var result = commandPalette(
    (commands = artboards),
    (title = localize(locStrings.go_to_artboard)),
    (multiselect = false)
  );
  if (!result) return;
  app.activeDocument.artboards.setActiveArtboardIndex(artboardLookup[result]);
  app.executeMenuCommand("fitin");
}

/** Present a command palette with all named objects and zoom to and select the chosen one. */
function goToNamedObject() {
  if (app.activeDocument.pageItems.length > namedObjectLimit)
    alert(
      localize(locStrings.go_to_named_object_limit, app.activeDocument.pageItems.length)
    );
  var objectLookup = {};
  var namedObjects = [];
  var item, itemName, itemType;
  for (var i = 0; i < app.activeDocument.pageItems.length; i++) {
    item = app.activeDocument.pageItems[i];
    if (
      item.name ||
      item.name.length ||
      item.typename == "PlacedItem" ||
      item.typename == "SymbolItem"
    ) {
      if (item.typename == "PlacedItem") {
        itemName = item.file.name;
      } else if (item.typename == "SymbolItem") {
        itemName = item.name || item.name.length ? item.name : item.symbol.name;
      } else {
        itemName = item.name;
      }
    }
    itemName += " (" + item.layer.name + ")";
    namedObjects.push({ name: itemName, type: item.typename });
    objectLookup[itemName] = item;
  }
  if (!namedObjects.length) alert(localize(locStrings.go_to_named_object_no_objects));
  var result = commandPalette(
    (commands = namedObjects),
    (title = localize(locStrings.go_to_named_object)),
    (multiselect = false)
  );
  if (!result) return;
  app.activeDocument.selection = null;
  item = objectLookup[result];
  item.selected = true;

  // reset zoom for current document
  app.activeDocument.views[0].zoom = 1;

  // get screen information
  var screenBounds = app.activeDocument.views[0].bounds;
  var screenW = screenBounds[2] - screenBounds[0];
  var screenH = screenBounds[1] - screenBounds[3];

  // get the (true) visible bounds of the returned object
  var bounds = item.visibleBounds;
  var itemW = bounds[2] - bounds[0];
  var itemH = bounds[1] - bounds[3];
  var itemCX = bounds[0] + itemW / 2;
  var itemCY = bounds[1] - itemH / 2;

  // reset the current view to center of selected object
  app.activeDocument.views[0].centerPoint = [itemCX, itemCY];

  // calculate new zoom ratio to fit view to selected object
  var zoomRatio;
  if (itemW * (screenH / screenW) >= itemH) {
    zoomRatio = screenW / itemW;
  } else {
    zoomRatio = screenH / itemH;
  }

  // set zoom to fit selected object plus a bit of padding
  var padding = 0.9;
  app.activeDocument.views[0].zoom = zoomRatio * padding;
}

/** Present a command palette with all recently open files and open the chosen one. */
function recentFiles() {
  var f, path;
  var filePaths = getRecentFilePaths();
  var files = {};
  var recentFileCommands = [];
  for (var i = 0; i < filePaths.length; i++) {
    path = filePaths[i];
    f = File(path);
    if (!f.exists) continue;
    fname = decodeURI(f.name);
    files[fname] = f;
    recentFileCommands.push({ name: fname, type: localize(locStrings.file) });
  }
  var result = commandPalette(
    (commands = recentFileCommands),
    (title = localize(locStrings.open_recent_file)),
    (multiselect = false)
  );
  if (!result) return;
  try {
    app.open(files[result]);
  } catch (e) {
    alert(localize(locStrings.fl_error_loading, result));
  }
}

/** Present a command palette with more recent commands and process the selected one. */
function recentCommands() {
  var recentCommands = [];
  for (var i = 0; i < data.recent.commands.length; i++) {
    if (!commandsData.hasOwnProperty(data.recent.commands[i])) continue; // FIXME: add alert
    recentCommands.push(commandsData[data.recent.commands[i]]);
  }
  var result = commandPalette(
    (commands = recentCommands),
    (title = localize(locStrings.recent_commands)),
    (columns = paletteSettings.defaultColumns),
    (multiselect = false)
  );
  if (!result) return;
  processCommand(result[0]);
}
