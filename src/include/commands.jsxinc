// COMMAND EXECUTION

/**
 * Iterate over each action for chosen command.
 * @param {Object} id Command id to execute.
 */
function processCommand(id) {
  var command = commandsData[id];
  if (command.type == "workflow") {
    insideWorkflow = true;
    // check to make sure all workflow commands are valid
    check = checkWorkflowActions(command.actions);
    if (check.deletedActions.length + check.incompatibleActions.length > 0) {
      alert(
        localize(
          strings.wf_needs_attention,
          check.deletedActions,
          check.incompatibleActions
        )
      );
      return;
    }
    // run each action in the workflow
    actions = command.actions;
    for (var i = 0; i < actions.length; i++) processCommand(commandsData[actions[i]]);
  } else {
    executeCommand(command);
  }
}

/**
 * Execute command action.
 * @param {Object} command Command to execute.
 */
function executeCommand(command) {
  // check command to see if an active document is required
  appDocuments = app.documents.length > 0;
  if (!appDocuments && command.docRequired)
    if (
      !confirm(
        localize(strings.cd_active_document_required, command.action),
        "noAsDflt",
        localize(strings.cd_exception)
      )
    )
      return;
  // check command to see if an active selection is required
  if (appDocuments && app.activeDocument.selection.length < 1 && command.selRequired)
    if (
      !confirm(
        localize(strings.cd_active_selection_required, command.action),
        "noAsDflt",
        localize(strings.cd_exception)
      )
    )
      return;
  switch (command.type.toLowerCase()) {
    case "config":
      try {
        scriptAction(command.action);
      } catch (e) {
        alert(localize(strings.cd_error_executing, command.localizedName, e));
      }
      break;
    case "builtin":
      try {
        builtinAction(command.action);
      } catch (e) {
        alert(localize(strings.cd_error_executing, command.localizedName, e));
      }
      break;
    case "menu":
      try {
        app.executeMenuCommand(command.action);
      } catch (e) {
        alert(localize(strings.cd_error_executing, command.localizedName, e));
      }
      break;
    case "tool":
      try {
        app.selectTool(command.action);
      } catch (e) {
        alert(localize(strings.tl_error_selecting, command, e));
      }
      break;
    case "action":
      try {
        app.doScript(command.name, command.set);
      } catch (e) {
        alert(localize(strings.ac_error_execution, command, e));
      }
      break;
    case "bookmark":
      f =
        command.bookmarkType == "file"
          ? new File(command.path)
          : new Folder(command.path);
      if (!f.exists) {
        alert(localize(strings.bm_error_exists, command.path));
        delete data.commands.bookmark[command];
        settings.save();
      } else {
        try {
          if (command.bookmarkType == "file") {
            app.open(f);
          } else {
            f.execute();
          }
        } catch (e) {
          alert(localize(strings.sc_error_execution, command.name, e));
        }
      }
      break;
    case "script":
      f = new File(command.path);
      if (!f.exists) {
        alert(localize(strings.sc_error_exists, command.path));
        delete data.commands.script[command];
        settings.save();
      } else {
        try {
          $.evalFile(f);
        } catch (e) {
          alert(localize(strings.sc_error_execution, command.name, e));
        }
      }
      break;
    default:
      alert(localize(strings.cd_invalid, command.type));
  }
  try {
    app.redraw();
  } catch (e) {
    $.writeln(e);
  }
}

/**************************************************
SUPPLEMENTAL COMMAND FUNCTIONS
**************************************************/

function versionCheck(command) {
  if (
    (command.hasOwnProperty("minVersion") && command.minVersion > aiVersion) ||
    (command.hasOwnProperty("maxVersion") && command.maxVersion < aiVersion)
  )
    return false;
  return true;
}
