// COMMANDS SETUP

function buildCommands(commands, filter) {
  for (var type in commands) {
    if (!filter.includes(type)) {
      var commandData;
      for (var command in commands[type]) {
        commandData = commands[type][command];
        // hide `Edit Workflow...` setting command if no workflows
        if (
          command == "config_editWorkflow" &&
          Object.keys(data.commands.workflow).length < 1
        )
          continue;
        // hide `Unhide Commands...` setting command if no hidden commands
        if (command == "config_unhideCommand" && data.settings.hidden.length < 1)
          continue;
        // // hide `Recent Commands...` and `Clear Recent Commands` if no recent commands
        if (command == "builtin_recentCommands" && data.recent.commands.length == 0)
          continue;
        if (command == "config_clearRecentCommands" && data.recent.commands.length == 0)
          continue;
        // make sure commands has localized strings
        if (commandData.hasOwnProperty("loc"))
          commandsData[localize(commandData.loc)] = commandData;
        else {
          commandsData[command] = commandData;
        }
      }
    }
  }
}

function loadActions() {
  var currentPath, set, actionCount, name;
  var pref = app.preferences;
  var path = "plugin/Action/SavedSets/set-";

  for (var i = 1; i <= 100; i++) {
    currentPath = path + i.toString() + "/";
    // get action sets
    set = pref.getStringPreference(currentPath + "name");
    if (!set) {
      break;
    }
    // get actions in set
    actionCount = Number(pref.getIntegerPreference(currentPath + "actionCount"));
    var name, key;
    for (var j = 1; j <= actionCount; j++) {
      name = pref.getStringPreference(currentPath + "action-" + j.toString() + "/name");
      key = "Action: " + name + " [" + set + "]";
      data.commands.action[key] = { name: name, type: "action", set: set };
    }
  }
}

// COMMAND EXECUTION

/**
 * Iterate over each action for chosen command.
 * @param {String} command Command to execute.
 */
function processCommand(command) {
  var commandData = commandsData[command];
  // update recent commands list
  if (command != "Recent Commands...") {
    // make sure commands isn't already in the lest
    var idx = data.recent.commands.indexOf(command);
    if (idx > -1) data.recent.commands.splice(idx, 1);
    data.recent.commands.unshift(command);
    // keep list at 10 items
    if (data.recent.commands.length > recentCommandsCount) data.recent.pop();
    settings.save();
  }

  var type = commandData.type;
  if (type == "workflow") {
    var actions = commandData.actions;
    // check to make sure all workflow commands are valid
    check = checkWorkflowActions(actions);
    if (check.deletedActions.length + check.incompatibleActions.length > 0) {
      alert(
        localize(
          locStrings.wf_needs_attention,
          check.deletedActions,
          check.incompatibleActions
        )
      );
      return;
    }
    // run each command in the workflow
    commands = commandsData[command].actions;
    for (var i = 0; i < commands.length; i++) processCommand(commands[i]);
  } else {
    executeCommand(command);
  }
}

/**
 * Execute command action.
 * @param {Object} command Action to execute.
 */
function executeCommand(command) {
  var commandData = commandsData[command];
  // check command to see if an active document is required
  appDocuments = app.documents.length > 0;
  if (!appDocuments && commandData.docRequired)
    if (
      !confirm(
        localize(locStrings.cd_active_document_required, commandData.action),
        "noAsDflt",
        localize(locStrings.cd_exception)
      )
    )
      return;
  // check command to see if an active selection is required
  appDocuments = app.documents.length > 0;
  docSelection = appDocuments && app.activeDocument.selection.length > 0;
  if (!docSelection && commandData.selRequired)
    if (
      !confirm(
        localize(locStrings.cd_active_selection_required, commandData.action),
        "noAsDflt",
        localize(locStrings.cd_exception)
      )
    )
      return;
  switch (commandData.type.toLowerCase()) {
    case "config":
    case "defaults":
      try {
        scriptAction(commandData.action);
      } catch (e) {
        alert(localize(locStrings.cd_error_executing, command, e));
      }
      break;
    case "builtin":
      try {
        builtinAction(commandData.action);
      } catch (e) {
        alert(localize(locStrings.cd_error_executing, command, e));
      }
      break;
    case "menu":
      try {
        app.executeMenuCommand(commandData.action);
      } catch (e) {
        alert(localize(locStrings.cd_error_executing, command, e));
      }
      break;
    case "tool":
      try {
        app.selectTool(commandData.action);
      } catch (e) {
        alert(localize(locStrings.tl_error_selecting, command, e));
      }
      break;
    case "action":
      try {
        app.doScript(commandData.name, commandData.set);
      } catch (e) {
        alert(localize(locStrings.ac_error_execution, command, e));
      }
      break;
    case "bookmark":
      f =
        commandData.bookmarkType == "file"
          ? new File(commandData.path)
          : new Folder(commandData.path);
      if (!f.exists) {
        alert(localize(locStrings.bm_error_exists, commandData.path));
        delete data.commands.bookmark[command];
        settings.save();
      } else {
        try {
          if (commandData.bookmarkType == "file") {
            app.open(f);
          } else {
            f.execute();
          }
        } catch (e) {
          alert(localize(locStrings.sc_error_execution, commandData.name, e));
        }
      }
      break;
    case "script":
      f = new File(commandData.path);
      if (!f.exists) {
        alert(localize(locStrings.sc_error_exists, commandData.path));
        delete data.commands.script[command];
        settings.save();
      } else {
        try {
          $.evalFile(f);
        } catch (e) {
          alert(localize(locStrings.sc_error_execution, commandData.name, e));
        }
      }
      break;
    default:
      alert(localize(locStrings.cd_invalid, commandData.type));
  }
  try {
    app.redraw();
  } catch (e) {
    $.writeln(e);
  }
}

/**************************************************
SUPPLEMENTAL COMMAND FUNCTIONS
**************************************************/

function versionCheck(command) {
  var commandData = commandsData[command];
  if (
    (commandData.minVersion && commandData.minVersion > aiVersion) ||
    (commandData.maxVersion && commandData.maxVersion < aiVersion)
  )
    return false;
  return true;
}
