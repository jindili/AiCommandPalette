// AI COMMAND PALETTE OPERATIONS

/** Ai Command Palette configuration commands. */
function AiCommandPaletteSettings() {
  var configCommands = filterCommands(
    (commands = null),
    (types = ["config"]),
    (showHidden = true),
    (showNonRelevant = false),
    (hideSpecificCommands = ["config_settings"])
  );
  var result = commandPalette(
    (commands = configCommands),
    (title = localize(strings.cp_config)),
    (columns = paletteSettings.columnSets.default),
    (multiselect = false)
  );
  if (!result) return;
  processCommand(result);
}

/** Ai Command Palette About Dialog. */
function about() {
  var win = new Window("dialog");
  win.text = localize(strings.about);
  win.alignChildren = "fill";

  // script info
  var pAbout = win.add("panel");
  pAbout.margins = 20;
  pAbout.alignChildren = "fill";
  pAbout.add("statictext", [0, 0, 500, 100], localize(strings.description), {
    multiline: true,
  });

  var links = pAbout.add("group");
  links.orientation = "column";
  links.alignChildren = ["center", "center"];
  links.add("statictext", undefined, localize(strings.version, _version));
  links.add("statictext", undefined, localize(strings.copyright));
  var githubText =
    localize(strings.github) + ": https://github.com/joshbduncan/AiCommandPalette";
  var github = links.add("statictext", undefined, githubText);
  // window buttons
  var winButtons = win.add("group");
  winButtons.orientation = "row";
  winButtons.alignChildren = ["center", "center"];
  var ok = winButtons.add("button", undefined, "OK");
  ok.preferredSize.width = 100;

  github.addEventListener("mousedown", function () {
    openURL("https://github.com/joshbduncan/AiCommandPalette");
  });

  win.show();
}

function buildStartup() {
  var availableStartupCommands = filterCommands(
    (commands = null),
    (types = [
      "file",
      "folder",
      "script",
      "workflow",
      "menu",
      "tool",
      "action",
      "builtin",
      "config",
    ]),
    (showHidden = true),
    (showNonRelevant = true),
    (hideSpecificCommands = prefs.startupCommands)
  );
  // show the startup builder dialog
  var result = startupBuilder(availableStartupCommands);
  if (!result) return;
  prefs.startupCommands = result;
}

/** Document Info Dialog */
function documentReport() {
  // setup the basic document info
  var rulerUnits = app.activeDocument.rulerUnits.toString().split(".").pop();
  var fileInfo =
    localize(strings.dr_header) +
    localize(strings.dr_filename) +
    app.activeDocument.name +
    "\n" +
    localize(strings.dr_path) +
    (app.activeDocument.path.fsName
      ? app.activeDocument.path.fsName
      : localize(strings.none)) +
    "\n" +
    localize(strings.dr_color_space) +
    app.activeDocument.documentColorSpace.toString().split(".").pop() +
    "\n" +
    localize(strings.dr_width) +
    convertPointsTo(app.activeDocument.width, rulerUnits) +
    " " +
    rulerUnits +
    "\n" +
    localize(strings.dr_height) +
    convertPointsTo(app.activeDocument.height, rulerUnits) +
    " " +
    rulerUnits;

  // generate all optional report information (all included by default)
  var reportOptions = {
    artboards: {
      str: getCollectionObjectNames(app.activeDocument.artboards)
        .toString()
        .replace(/,/g, "\n"),
      active: true,
    },
    fonts: {
      str: getCollectionObjectNames(getDocumentFonts(app.activeDocument), true)
        .toString()
        .replace(/,/g, "\n"),
      active: true,
    },
    layers: {
      str: getCollectionObjectNames(app.activeDocument.layers)
        .toString()
        .replace(/,/g, "\n"),
      active: true,
    },
    placed_items: {
      str: getPlacedFileInfoForReport().toString().replace(/,/g, "\n"),
      active: true,
    },
    spot_colors: {
      str: getCollectionObjectNames(app.activeDocument.spots, true)
        .toString()
        .replace(/,/g, "\n"),
      active: true,
    },
  };

  // build the report from the selected options (active = true)
  function buildReport() {
    if (!app.activeDocument.saved) alert(localize(strings.document_report_warning));

    var infoString = localize(strings.dr_info_string) + "\n\n" + fileInfo;
    for (var p in reportOptions) {
      if (reportOptions[p].active && reportOptions[p].str) {
        infoString +=
          "\n\n" +
          localize(strings[p.toLowerCase()]) +
          "\n-----\n" +
          reportOptions[p].str;
      }
    }
    infoString += "\n\n" + localize(strings.dr_file_created) + new Date();
    return infoString;
  }

  // setup the dialog
  var win = new Window("dialog");
  win.text = localize(strings.document_report);
  win.orientation = "column";
  win.alignChildren = ["center", "top"];
  win.alignChildren = "fill";

  // panel - options
  var pOptions = win.add("panel", undefined, "Include?");
  pOptions.orientation = "row";
  pOptions.margins = 20;

  // add checkboxes for each report option
  var cb;
  for (var p in reportOptions) {
    cb = pOptions.add("checkbox", undefined, p);
    if (reportOptions[p].str) {
      cb.value = true;
      // add onClick function for each cb to update rebuild report
      cb.onClick = function () {
        if (this.value) {
          reportOptions[this.text].active = true;
        } else {
          reportOptions[this.text].active = false;
        }
        info.text = buildReport();
      };
    } else {
      cb.value = false;
      cb.enabled = false;
    }
  }

  // script info
  var info = win.add("edittext", [0, 0, 400, 400], buildReport(), {
    multiline: true,
    scrollable: true,
    readonly: true,
  });

  // window buttons
  var winButtons = win.add("group");
  winButtons.orientation = "row";
  winButtons.alignChildren = ["center", "center"];
  var saveInfo = winButtons.add("button", undefined, localize(strings.save));
  saveInfo.preferredSize.width = 100;
  var close = winButtons.add("button", undefined, localize(strings.close), {
    name: "ok",
  });
  close.preferredSize.width = 100;

  // save document info to selected file
  saveInfo.onClick = function () {
    var f = File.saveDialog();
    if (f) {
      try {
        f.encoding = "UTF-8";
        f.open("w");
        f.write(info.text);
        f.close();
      } catch (e) {
        alert(localize(strings.fl_error_writing, f));
      }
      if (f.exists) alert(localize(strings.file_saved, f.fsName));
    }
  };
  // show the info dialog
  win.show();
}

/**
 * Export the active artboard as a png file using the api `Document.imageCapture()` method.
 * https://ai-scripting.docsforadobe.dev/jsobjref/Document.html?#document-imagecapture
 */
function imageCapture() {
  if (activeDocument) {
    var f = File.saveDialog();
    if (f) {
      try {
        app.activeDocument.imageCapture(f);
      } catch (e) {
        alert(localize(strings.fl_error_writing, f));
      }
      // if chosen file name doesn't end in ".png" add the
      // correct extension so they captured file open correctly
      if (f.name.indexOf(".png") < f.name.length - 4)
        f.rename(f.name.toString() + ".png");
      if (f.exists) alert(localize(strings.file_saved, f.fsName));
    }
  }
}

/**
 *
 * https://ai-scripting.docsforadobe.dev/jsobjref/Document.html#document-exportvariables
 */
function exportVariables() {
  if (app.activeDocument.variables.length > 0) {
    var f = File.saveDialog();
    if (f) {
      try {
        app.activeDocument.exportVariables(f);
      } catch (e) {
        alert(localize(strings.fl_error_writing, f));
      }
      if (f.exists) alert(localize(strings.file_saved, f.fsName));
    }
  } else {
    alert(localize(strings.no_document_variables));
  }
}

/** Set bookmarked file to open in Ai from within Ai Command Palette. */
function loadFileBookmark() {
  var acceptedTypes = [
    ".ai",
    ".ait",
    ".pdf",
    ".dxf",
    ".avif",
    ".BMP",
    ".RLE",
    ".DIB",
    ".cgm",
    ".cdr",
    ".eps",
    ".epsf",
    ".ps",
    ".emf",
    ".gif",
    ".heic",
    ".heif",
    ".eps",
    ".epsf",
    ".ps",
    ".jpg",
    ".jpe",
    ".jpeg",
    ".jpf",
    ".jpx",
    ".jp2",
    ".j2k",
    ".j2c",
    ".jpc",
    ".rtf",
    ".doc",
    ".docx",
    ".PCX",
    ".psd",
    ".psb",
    ".pdd",
    ".PXR",
    ".png",
    ".pns",
    ".svg",
    ".svgz",
    ".TGA",
    ".VDA",
    ".ICB",
    ".VST",
    ".txt",
    ".tif",
    ".tiff",
    ".webp",
    ".wmf",
  ]; // file types taken from Ai open dialog
  var re = new RegExp(acceptedTypes.join("|") + "$", "i");
  var files = loadFileTypes(localize(strings.bm_load_bookmark), true, re);

  if (files.length == 0) return;

  // get all current bookmark paths to ensure no duplicates
  var currentFileBookmarkIds = [];
  var currentFileBookmarkPaths = [];
  for (var i = 0; i < prefs.bookmarks.length; i++) {
    if (prefs.bookmarks[i].type != "file") continue;
    currentFileBookmarkIds.push(prefs.bookmarks[i].id);
    currentFileBookmarkPaths.push(prefs.bookmarks[i].path);
  }

  var f, bookmark, bookmarkName, id, idx, oldId;
  var newBookmarks = [];
  var newBookmarkIds = [];
  var oldBookmarksToRemoveFromStartup = [];
  for (var j = 0; j < files.length; j++) {
    f = files[j];
    if (currentFileBookmarkPaths.includes(f.fsName)) {
      idx = currentFileBookmarkPaths.indexOf(f.fsName);
      if (
        !confirm(
          localize(strings.bm_already_loaded),
          "noAsDflt",
          localize(strings.bm_already_loaded_title)
        )
      )
        continue;
      oldId = prefs.startupCommands.splice(
        prefs.startupCommands.indexOf(currentFileBookmarkIds[idx]),
        1
      );
      delete commandsData[oldId];
    }

    bookmarkName = decodeURI(f.name);
    id = generateCommandId("bookmark_" + bookmarkName.toLowerCase());
    bookmark = {
      id: id,
      name: bookmarkName,
      action: "bookmark",
      type: "file",
      path: f.fsName,
      docRequired: false,
      selRequired: false,
      hidden: false,
    };
    newBookmarks.push(bookmark);
    newBookmarkIds.push(bookmark.id);
  }

  if (newBookmarks.length == 0) return;

  prefs.bookmarks = prefs.bookmarks.concat(newBookmarks);
  addToStartup(newBookmarkIds);
}

/** Set bookmarked folder to open on system from within Ai Command Palette. */
function loadFolderBookmark() {
  var f;
  f = Folder.selectDialog(localize(strings.bm_load_bookmark));

  if (!f) return;

  // get all current bookmark paths to ensure no duplicates
  var currentFolderBookmarks = [];
  for (var i = 0; i < prefs.bookmarks.length; i++) {
    if (prefs.bookmarks[i].type != "folder") continue;
    currentFolderBookmarks.push(prefs.bookmarks[i].path);
  }

  if (currentFolderBookmarks.includes(f.fsName)) {
    if (
      !confirm(
        localize(strings.bm_already_loaded),
        "noAsDflt",
        localize(strings.bm_already_loaded_title)
      )
    )
      return;
  }

  var bookmarkName = decodeURI(f.name);
  var bookmark = {
    id: "bookmark" + "_" + bookmarkName.toLowerCase().replace(" ", "_"),
    name: bookmarkName,
    action: "bookmark",
    type: "folder",
    path: f.fsName,
    docRequired: false,
    selRequired: false,
    hidden: false,
  };
  prefs.bookmarks.push(bookmark);
  addToStartup([bookmark.id]);
}

/** Load external scripts into Ai Command Palette. */
function loadScripts() {
  var acceptedTypes = [".jsx", ".js"];
  var re = new RegExp(acceptedTypes.join("|") + "$", "i");
  var files = loadFileTypes(localize(strings.sc_load_script), true, re);

  if (files.length == 0) return;

  // get all current script paths to ensure no duplicates
  var currentScripts = [];
  for (var i = 0; i < prefs.scripts.length; i++) {
    currentScripts.push(prefs.scripts[i].path);
  }

  var f, script, scriptName, id;
  var newScripts = [];
  var newScriptIds = [];
  for (var j = 0; j < files.length; j++) {
    f = files[j];
    if (currentScripts.hasOwnProperty(f.fsName)) {
      if (
        !confirm(
          localize(strings.sc_already_loaded),
          "noAsDflt",
          localize(strings.sc_already_loaded_title)
        )
      )
        continue;
    }

    scriptName = decodeURI(f.name);
    id = generateCommandId("script_" + scriptName.toLowerCase());
    script = {
      id: id,
      name: scriptName,
      action: "script",
      type: "script",
      path: f.fsName,
      docRequired: false,
      selRequired: false,
      hidden: false,
    };
    newScripts.push(script);
    newScriptIds.push(script.id);
  }

  if (newScripts.length == 0) return;

  prefs.scripts = prefs.scripts.concat(newScripts);
  addToStartup(newScriptIds);
}

/** Show all scripts. */
function showAllScripts() {
  var scriptCommands = filterCommands(
    (commands = null),
    (types = ["script"]),
    (showHidden = true),
    (showNonRelevant = false),
    (hideSpecificCommands = null)
  );
  var columns = {};
  columns[localize(strings.name_title_case)] = {
    width: 100,
    key: "name",
  };
  columns[localize(strings.type_title_case)] = {
    width: 100,
    key: "type",
  };
  columns["Path"] = {
    // FIXME: localize
    width: 100,
    key: "path",
  };
  var result = commandPalette(
    (commands = scriptCommands),
    (title = localize(strings.Scripts)),
    (columns = columns),
    (multiselect = false)
  );
  if (!result) return;
  processCommand(result);
}

/** Show all bookmarks. */
function showAllBookmarks() {
  var bookmarkCommands = filterCommands(
    (commands = null),
    (types = ["file", "folder"]),
    (showHidden = true),
    (showNonRelevant = true),
    (hideSpecificCommands = null)
  );
  var columns = {};
  columns[localize(strings.name_title_case)] = {
    width: 100,
    key: "name",
  };
  columns[localize(strings.type_title_case)] = {
    width: 100,
    key: "type",
  };
  columns["Path"] = {
    // FIXME: localize
    width: 100,
    key: "path",
  };
  var result = commandPalette(
    (commands = bookmarkCommands),
    (title = localize(strings.Bookmarks)),
    (columns = columns),
    (multiselect = false)
  );
  if (!result) return;
  processCommand(result);
}

/** Show all actions. */
function showAllActions() {
  var actionCommands = filterCommands(
    (commands = null),
    (types = ["action"]),
    (showHidden = true),
    (showNonRelevant = false),
    (hideSpecificCommands = null)
  );
  var columns = {};
  columns[localize(strings.name_title_case)] = {
    width: 100,
    key: "name",
  };
  columns["Set"] = {
    // FIXME: localize
    width: 100,
    key: "set",
  };
  var result = commandPalette(
    (commands = actionCommands),
    (title = localize(strings.Actions)),
    (columns = columns),
    (multiselect = false)
  );
  if (!result) return;
  processCommand(result);
}

/** Hide commands from Ai Command Palette. */
function hideCommand() {
  var hideableCommands = filterCommands(
    (commands = null),
    (types = ["bookmark", "script", "workflow", "menu", "tool", "action", "builtin"]),
    (showHidden = false),
    (showNonRelevant = true),
    (hideSpecificCommands = null)
  );
  var result = commandPalette(
    (commands = hideableCommands),
    (title = localize(strings.cd_hide_select)),
    (columns = paletteSettings.columnSets.default),
    (multiselect = true)
  );
  if (!result) return;
  prefs.hiddenCommands = prefs.hiddenCommands.concat(result);
}

/** Unhide hidden commands. */
function unhideCommand() {
  var result = commandPalette(
    (commands = prefs.hiddenCommands),
    (title = localize(strings.cd_reveal_menu_select)),
    (columns = paletteSettings.columnSets.default),
    (multiselect = true)
  );
  if (!result) return;
  for (var i = 0; i < result.length; i++) {
    prefs.hiddenCommands.splice(prefs.hiddenCommands.indexOf(result[i]), 1);
  }
}

/** Delete commands from Ai Command Palette. */
function deleteCommand() {
  var deletableCommands = filterCommands(
    (commands = null),
    (types = ["file", "folder", "script", "workflow"]),
    (showHidden = false),
    (showNonRelevant = true),
    (hideSpecificCommands = null)
  );
  var result = commandPalette(
    (commands = deletableCommands),
    (title = localize(strings.cd_delete_select)),
    (columns = paletteSettings.columnSets.default),
    (multiselect = true)
  );
  if (!result) return;

  // get all of the actual command names for the confirmation dialog
  var commandNames = [];
  for (var i = 0; i < result.length; i++) {
    commandNames.push(commandsData[result[i]].name);
  }

  // confirm command deletion
  if (
    !confirm(
      localize(strings.cd_delete_confirm, commandNames.join("\n")),
      "noAsDflt",
      localize(strings.cd_delete_confirm_title)
    )
  )
    return;

  // go through each deletable command type and remove them from user prefs
  var typesToCheck = ["workflows", "bookmarks", "scripts"];
  for (var i = 0; i < typesToCheck.length; i++) {
    for (var j = prefs[typesToCheck[i]].length - 1; j >= 0; j--) {
      if (result.includes(prefs[typesToCheck[i]][j].id))
        prefs[typesToCheck[i]].splice(j, 1);
    }
  }
}

// BUILT-IN COMMANDS

/**
 * Load all open documents from the current document as objects into the data model.
 * @returns Loaded command ids.
 */
function loadOpenDocuments() {
  var arr = [];
  var cur, obj;
  for (var i = 0; i < app.documents.length; i++) {
    cur = app.documents[i];
    id = generateCommandId("document_" + cur.name.toLowerCase());
    obj = {
      id: id,
      name: cur.name,
      action: "document",
      type: "document",
      document: cur,
      rulerUnits: cur.rulerUnits.toString().split(".").pop(),
      colorSpace: cur.documentColorSpace.toString().split(".").pop(),
      path: cur.path,
      docRequired: false,
      selRequired: false,
      hidden: false,
    };
    arr.push(id);
    commandsData[id] = obj;
  }
  return arr;
}

/** Present a command palette with all open documents and goto the chosen one. */
function goToOpenDocument() {
  var arr = loadOpenDocuments();
  var columns = {};
  columns[localize(strings.name_title_case)] = {
    width: 100,
    key: "name",
  };
  columns["Color Space"] = {
    // FIXME: localize
    width: 100,
    key: "colorSpace",
  };
  columns["Ruler Units"] = {
    // FIXME: localize
    width: 100,
    key: "rulerUnits",
  };
  columns["Path"] = {
    // FIXME: localize
    width: 100,
    key: "path",
  };
  var result = commandPalette(
    (commands = arr),
    (title = localize(strings.go_to_open_document)),
    (columns = columns),
    (multiselect = false)
  );
  if (!result) return;
  commandsData[result].document.activate();
}

/**
 * Load all artboards from the current document as objects into the data model.
 * @returns Loaded command ids.
 */
function loadActiveDocumentArtboards() {
  var arr = [];
  var cur, id, obj;
  for (var i = 0; i < app.activeDocument.artboards.length; i++) {
    cur = app.activeDocument.artboards[i];
    id = generateCommandId("artboard_" + i.toString());
    obj = {
      id: id,
      name: cur.name,
      action: "artboard",
      type: "artboard",
      idx: i,
      docRequired: false,
      selRequired: false,
      hidden: false,
    };
    arr.push(id);
    commandsData[id] = obj;
  }
}

/** Present a command palette with all artboards and zoom to the chosen one. */
function goToArtboard() {
  var arr = loadActiveDocumentArtboards();

  var columns = {};
  columns["Index"] = {
    width: 35,
    key: "idx",
    hideTitle: true,
  };
  columns[localize(strings.name_title_case)] = {
    width: 100,
    key: "name",
  };
  var result = commandPalette(
    (commands = arr),
    (title = localize(strings.go_to_artboard)),
    (columns = columns),
    (multiselect = false)
  );

  if (!result) return;
  app.activeDocument.artboards.setActiveArtboardIndex(commandsData[result].idx);
  app.executeMenuCommand("fitin");
}

/**
 * Load all page items from the current document as objects into the data model.
 * @returns Loaded command ids.
 */
function loadActiveDocumentPageItems() {
  var arr = [];
  var cur, name, id, obj;
  for (var i = 0; i < app.activeDocument.pageItems.length; i++) {
    cur = app.activeDocument.pageItems[i];
    if (
      cur.name ||
      cur.name.length ||
      cur.typename == "PlacedItem" ||
      cur.typename == "SymbolItem"
    ) {
      if (cur.typename == "PlacedItem") {
        name = cur.file.name;
      } else if (cur.typename == "SymbolItem") {
        name = cur.name || cur.name.length ? cur.name : cur.symbol.name;
      } else {
        name = cur.name;
      }
    }
    id = generateCommandId("pageItem_" + i.toString());
    obj = {
      id: id,
      name: name,
      action: "pageItem",
      type: cur.typename,
      pageItem: cur,
      layer: cur.layer.name,
      docRequired: false,
      selRequired: false,
      hidden: false,
    };
    arr.push(id);
    commandsData[id] = obj;
  }
  return arr;
}

/** Present a command palette with all named objects and zoom to and select the chosen one. */
function goToNamedObject() {
  if (app.activeDocument.pageItems.length > namedObjectLimit)
    alert(
      localize(strings.go_to_named_object_limit, app.activeDocument.pageItems.length)
    );

  var arr = loadActiveDocumentPageItems();
  if (!arr.length) {
    alert(localize(strings.go_to_named_object_no_objects));
    return;
  }

  var columns = {};
  columns[localize(strings.name_title_case)] = {
    width: 100,
    key: "name",
  };
  columns[localize(strings.type_title_case)] = {
    width: 100,
    key: "type",
  };
  columns[localize(strings.layer_title_case)] = {
    width: 100,
    key: "layer",
  };
  var result = commandPalette(
    (commands = arr),
    (title = localize(strings.go_to_named_object)),
    (columns = columns),
    (multiselect = false)
  );

  if (!result) return;
  var pageItem = commandsData[result].pageItem;
  app.activeDocument.selection = null;
  pageItem.selected = true;

  // reset zoom for current document
  app.activeDocument.views[0].zoom = 1;

  zoomIntoPageItem(pageItem);
}

/**
 * Load recently opened files as objects into the data model.
 * @returns Loaded command ids.
 */
function loadRecentFiles() {
  var arr = [];
  var fileCount = app.preferences.getIntegerPreference("RecentFileNumber");
  var path, cur, id, obj;
  for (var i = 0; i < fileCount; i++) {
    path = app.preferences.getStringPreference(
      "plugin/MixedFileList/file" + i + "/path"
    );
    cur = File(path);
    if (!cur.exists) continue;
    id = generateCommandId("recentFile_" + i.toString());
    obj = {
      id: id,
      name: decodeURI(cur.name),
      action: "document",
      type: "document",
      document: cur,
      path: cur.fsName,
      docRequired: false,
      selRequired: false,
      hidden: false,
    };
    arr.push(id);
    commandsData[id] = obj;
  }
  return arr;
}

/** Present a command palette with all recently opened files and open the chosen one. */
function recentFiles() {
  var arr = loadRecentFiles();
  var columns = {};
  columns[localize(strings.name_title_case)] = {
    width: 100,
    key: "name",
  };
  columns["Path"] = {
    // FIXME: localize
    width: 100,
    key: "path",
  };
  var result = commandPalette(
    (commands = arr),
    (title = localize(strings.open_recent_file)),
    (columns = columns),
    (multiselect = false)
  );
  if (!result) return;

  try {
    app.open(commandsData[result].document);
  } catch (e) {
    alert(localize(strings.fl_error_loading, result));
  }
}

/** Present a command palette with more recent commands and process the selected one. */
function showRecentCommands() {
  var result = commandPalette(
    (commands = mostRecentCommands),
    (title = localize(strings.recent_commands)),
    (columns = paletteSettings.columnSets.default),
    (multiselect = false)
  );
  if (!result) return;
  processCommand(result);
}
