/**
 * Check is any workflow actions are currently non-active (non deleted, and Ai version compatible).
 * @param   {Array} actions Workflow action steps to check.
 * @returns {Array}         Non-active workflow action.
 */
function checkWorkflowActions(actions) {
  var badActions = [];
  for (var i = 0; i < actions.length; i++) {
    command = actions[i];
    if (!commandsData.hasOwnProperty(actions[i]) || !commandVersionCheck(actions[i]))
      badActions.push(actions[i]);
  }
  return badActions;
}

// WORKFLOW AUTOMATION

/**
 * Build or Edit workflows.
 * @param {String} editWorkflowId Id of a workflow to edit.
 */
function buildWorkflow(editWorkflowId) {
  var availableWorkflowCommands = filterCommands(
    (commands = null),
    (types = [
      "file",
      "folder",
      "script",
      "workflow",
      "menu",
      "tool",
      "action",
      "builtin",
    ]),
    (showHidden = true),
    (showNonRelevant = true),
    (hideSpecificCommands = workflow ? [workflow.id] : []) // hide current workflow when editing to prevent recursive loop
  );
  // show the workflow builder dialog
  var result = workflowBuilder(availableWorkflowCommands, editWorkflowId);

  if (!result) return;

  var id;
  // when overwriting delete previous version and update prefs
  if (result.overwrite) {
    for (var i = prefs.workflows.length - 1; i >= 0; i--) {
      if (prefs.workflows[i].name == result.name) {
        prefs.workflows[i].actions = result.actions;
        id = prefs.workflows[i].id;
      }
    }
  } else {
    id = cleanupCommandId("workflow_" + result.name.toLowerCase());
    var workflow = {
      id: id,
      name: result.name,
      actions: result.actions,
      type: "workflow",
      docRequired: false,
      selRequired: false,
      hidden: false,
    };
    prefs.workflows.push(workflow);
  }

  addToStartup([id]);
}

/** Show all workflows. */
function showAllWorkflows() {
  var workflows = filterCommands(
    (commands = null),
    (types = ["workflow"]),
    (showHidden = true),
    (showNonRelevant = false),
    (hideSpecificCommands = null)
  );
  var result = commandPalette(
    (commands = workflows),
    (title = localize(strings.Workflows)),
    (columns = paletteSettings.columnSets.default),
    (multiselect = false)
  );
  if (!result) return;
  processCommand(result);
}

/** Choose a workflow to edit. */
function editWorkflow() {
  var workflows = filterCommands(
    (commands = null),
    (types = ["workflow"]),
    (showHidden = true),
    (showNonRelevant = false),
    (hideSpecificCommands = null)
  );
  var result = commandPalette(
    (commands = workflows),
    (title = localize(strings.wf_choose)),
    (columns = paletteSettings.columnSets.default),
    (multiselect = false)
  );
  if (!result) return;
  buildWorkflow(result);
}
