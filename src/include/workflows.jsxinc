// WORKFLOW AUTOMATION

/**
 * Build or Edit workflows.
 * @param {String} editWorkflowId Id of a workflow to edit.
 */
function buildWorkflow(editWorkflowId) {
  var availableWorkflowCommands = filterCommands(
    (commands = null),
    (types = [
      "file",
      "folder",
      "script",
      "workflow",
      "menu",
      "tool",
      "action",
      "builtin",
    ]),
    (showHidden = true),
    (showNonRelevant = true),
    (hideSpecificCommands = workflow ? [workflow.id] : []) // hide current workflow when editing to prevent recursive loop
  );
  // show the workflow builder dialog
  var result = workflowBuilder(availableWorkflowCommands, editWorkflowId);

  if (!result) return;

  var workflow = {
    id: "workflow" + "_" + result.name.toLowerCase().replace(" ", "_"),
    name: result.name,
    actions: result.actions,
    type: "workflow",
    docRequired: false,
    selRequired: false,
    hidden: false,
  };
  prefs.workflows.push(workflow);

  // no need to add to startup if editing a previous workflow
  if (editWorkflowId) return;
  addToStartup([workflow.id]);
}

/** Show all workflows. */
function showAllWorkflows() {
  var workflows = filterCommands(
    (commands = null),
    (types = ["workflow"]),
    (showHidden = true),
    (showNonRelevant = false),
    (hideSpecificCommands = null)
  );
  var result = commandPalette(
    (commands = workflows),
    (title = localize(strings.Workflows)),
    (columns = paletteSettings.columnSets.default),
    (multiselect = false)
  );
  if (!result) return;
  processCommand(result);
}

/** Choose a workflow to edit. */
function editWorkflow() {
  var workflows = filterCommands(
    (commands = null),
    (types = ["workflow"]),
    (showHidden = true),
    (showNonRelevant = false),
    (hideSpecificCommands = null)
  );
  var result = commandPalette(
    (commands = workflows),
    (title = localize(strings.wf_choose)),
    (columns = paletteSettings.columnSets.default),
    (multiselect = false)
  );
  if (!result) return;
  buildWorkflow(result);
}
