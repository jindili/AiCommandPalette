// WORKFLOW AUTOMATION

/**
 * Build or Edit workflows.
 * @param {String} workflow Workflow to edit.
 */
function buildWorkflow(workflow) {
  var availableWorkflowCommands = filterCommands(
    (commands = commandsData),
    (types = ["bookmark", "script", "workflow", "menu", "tool", "action", "builtin"]),
    (showHidden = false),
    (hideCommands = workflow ? [workflow.id] : []),
    (docRequired = true),
    (selRequired = true)
  );
  // show the workflow builder dialog
  var result = workflowBuilder(
    (commands = availableWorkflowCommands),
    (editWorkflow = workflow)
  );

  if (!result) return;
  var workflowActions = [];
  try {
    for (var i = 0; i < result.actions.length; i++) {
      workflowActions.push(localizedCommandLookup[result.actions[i].text]); // FIXME: switch to object
    }
    data.commands.workflow[result.name] = {
      type: "workflow",
      actions: workflowActions,
    };
  } catch (e) {
    alert(localize(locStrings.wf_error_saving, result.name));
  }
}

/** Show all workflows. */
function showAllWorkflows() {
  var workflows = filterCommands(
    (commands = commandsData),
    (types = ["workflow"]),
    (showHidden = false),
    (hideCommands = null),
    (docRequired = false),
    (selRequired = false)
  );
  var result = commandPalette(
    (commands = workflows),
    (title = localize(locStrings.Workflows)),
    (columns = paletteSettings.defaultColumns),
    (multiselect = false)
  );
  if (!result) return;
  processCommand(result);
}

/** Choose a workflow to edit. */
function editWorkflow() {
  var workflows = filterCommands(
    (commands = commandsData),
    (types = ["workflow"]),
    (showHidden = false),
    (hideCommands = null),
    (docRequired = false),
    (selRequired = false)
  );
  var result = commandPalette(
    (commands = workflows),
    (title = localize(locStrings.wf_choose)),
    (columns = paletteSettings.defaultColumns),
    (multiselect = false)
  );
  if (!result) return;
  buildWorkflow(result);
}

/**
 * Check to make sure a workflow doesn't contain deleted actions
 * or actions that are not compatible with the current Ai version.
 * @param   {Array} actions Workflow action steps to check.
 * @returns {Object}        Any deleted or incompatible action.
 */
function checkWorkflowActions(actions) {
  var deletedActions = [];
  var incompatibleActions = [];
  var command;
  for (var i = 0; i < actions.length; i++) {
    command = actions[i];
    if (!allCommands.includes(command)) {
      deletedActions.push(command);
    } else if (!versionCheck(command)) {
      incompatibleActions.push(command);
    }
  }
  return {
    deletedActions: deletedActions,
    incompatibleActions: incompatibleActions,
  };
}
